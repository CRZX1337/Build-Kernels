name: Atom-X Kernel Builder

on:
  workflow_dispatch:
  push:
    branches: [ main ]

env:
  KERNEL_NAME: "Atom-X-Redwood"
  KERNEL_VERSION: "v3.0"
  TOOLCHAIN_URL: "https://android.googlesource.com/platform/prebuilts/clang/host/linux-x86/+archive/refs/heads/master/clang-r487747c/binutils.tar.gz"
  ANY_KERNEL_REPO: "https://github.com/CRZX1337/AnyKernel3"
  ARCH: arm64
  DEFCONFIG: gki_defconfig
  JOBS: $(nproc --all)

jobs:
  build:
    runs-on: ubuntu-latest
    timeout-minutes: 150

    steps:
    - name: Checkout Kernel Source
      uses: actions/checkout@v4
      with:
        submodules: recursive
        fetch-depth: 0

    - name: Setup Build Environment
      run: |
        sudo apt-get update
        sudo apt-get install -y \
          build-essential libncurses-dev libssl-dev \
          bc flex bison libelf-dev git ccache zip \
          python3 python3-pip dwarves rsync
        pip3 install pyelftools

    - name: Setup Clang Toolchain
      run: |
        mkdir -p clang
        wget ${{ env.TOOLCHAIN_URL }} -O toolchain.tar.gz
        tar -xzf toolchain.tar.gz -C clang --strip-components=1
        rm toolchain.tar.gz
        echo "$(pwd)/clang/bin" >> $GITHUB_PATH

    - name: Configure Build Environment
      run: |
        echo "CONFIG_LOCALVERSION=\"-$KERNEL_NAME\"" >> arch/$ARCH/configs/$DEFCONFIG
        echo "CONFIG_MODULE_COMPRESS_NONE=y" >> arch/$ARCH/configs/$DEFCONFIG

    - name: Build Kernel
      run: |
        make -j$JOBS O=out $DEFCONFIG
        make -j$JOBS O=out \
          ARCH=$ARCH \
          CC=clang \
          LD=ld.lld \
          AR=llvm-ar \
          NM=llvm-nm \
          STRIP=llvm-strip \
          OBJCOPY=llvm-objcopy \
          OBJDUMP=llvm-objdump \
          CLANG_TRIPLE=aarch64-linux-gnu- \
          CROSS_COMPILE=aarch64-linux-android- \
          LLVM=1 \
          LLVM_IAS=1 \
          CROSS_COMPILE_ARM32=arm-linux-androideabi-

    - name: Verify Kernel Image
      run: |
        if [ ! -f out/arch/arm64/boot/Image ]; then
          echo "::error::Kernel Image not found!"
          exit 1
        fi
        file out/arch/arm64/boot/Image | grep 'Linux kernel ARM64 MSM Image'

    - name: Prepare AnyKernel3
      run: |
        git clone --depth=1 $ANY_KERNEL_REPO AnyKernel3
        cp out/arch/arm64/boot/Image AnyKernel3/kernel
        mkdir -p AnyKernel3/dtb
        cp out/arch/arm64/boot/dts/vendor/*.dtb AnyKernel3/dtb/
        mkdir -p AnyKernel3/modules
        find out/modules -name "*.ko" -exec cp {} AnyKernel3/modules/ \;
        cp -r out/modules/lib/modules/* AnyKernel3/modules/

    - name: Create Flashable ZIP
      run: |
        cd AnyKernel3
        sed -i "s/block.*#.*/block=\/dev\/block\/byname\/boot;/g" anykernel.sh
        sed -i "s/is_slot_device=.*/is_slot_device=0;/g" anykernel.sh
        zip -r9 "${{ env.KERNEL_NAME }}-${{ env.KERNEL_VERSION }}-$(date +'%Y%m%d').zip" *
        sha256sum *.zip > checksum.sha256

    - name: Upload Artifacts
      uses: actions/upload-artifact@v4
      with:
        name: Atom-X-Kernel
        path: |
          AnyKernel3/*.zip
          AnyKernel3/checksum.sha256
        if-no-files-found: error

    - name: Cleanup Workspace
      if: always()
      run: |
        rm -rf out/ AnyKernel3/ clang/